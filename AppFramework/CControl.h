#pragma once#include <Controls.h>class CWindow;enum {	kAutoPositionFlagPinLeft = (1 << 0),	kAutoPositionFlagPinRight = (1 << 1),	kAutoPositionFlagResizeHorz = (kAutoPositionFlagPinLeft | kAutoPositionFlagPinRight),	kAutoPositionFlagPinTop = (1 << 2),	kAutoPositionFlagPinBottom = (1 << 3),	kAutoPositionFlagResizeVert = (kAutoPositionFlagPinTop | kAutoPositionFlagPinBottom),	kAutoPositionFlagsPinTopLeft = (kAutoPositionFlagPinLeft | kAutoPositionFlagPinTop)};typedef UInt16 AutoPositionFlags;class CControl {public:	CControl(CWindow* wd, Rect* box, Str255 title, SInt16 value, SInt16 min, SInt16 max, SInt16 procID);	virtual ~CControl() { DisposeControl(mControlHandle); mControlHandle = NULL; }		void AutoPositionInWindow();		void SetAutoPositionFlags(AutoPositionFlags flags) { mAutoPositionFlags = flags; }		virtual void Activate();	virtual void Deactivate();		virtual void HandleClick(ControlPartCode hitPart) {}	virtual void HandleMouseDown(const EventRecord& event);	protected:	AutoPositionFlags mAutoPositionFlags;	short mLeftDistance;	short mRightDistance;	short mTopDistance;	short mBottomDistance;	ControlHandle mControlHandle;};